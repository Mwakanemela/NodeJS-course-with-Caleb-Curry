////////////////////////
//////// NOTES 1 ///////
\\\\\\\\\\\\\\\\\\\\\\\\

- when using http to create server no dependencies are required(its in built in nodejs)
- npm init -> to initialize nodejs project
- "scripts": {
    "start": "node src/app.js"
  }, -> this ensures that when i write npm run start it executes app.js in src: the start can have any name

////////////////////////
//////// NOTES 2 ///////
\\\\\\\\\\\\\\\\\\\\\\\\
- npm install uuid -> this package allows us to generate random ids
- git reset HEAD <directory-name> -> this helps to unstage a directory you have staged in git 
- package.json -> when you install dependencies it says what range of possible versions are okay to be used
- package-lock.json -> says what version of the package is actually being used
- add "type":"module" in package.json if you want to use import for importing modules (es6 type)
  require method is for default javascript

- visit: https://www.toptal.com/developers/gitignore/api/node,vuejs,webstorm to get a list of most .gitignore files

////////////////////////
//////// NOTES 3 ///////
\\\\\\\\\\\\\\\\\\\\\\\\
- when creating router endpoints always remember that the functions take request, response parameters
- npm i nodemon -> good for running server so that for every change you dont have to restart the server 
- npx nodemon <server-file> -> one way to run a server with nodemon


////////////////////////
//////// NOTES 4 ///////
\\\\\\\\\\\\\\\\\\\\\\\\
app.use(express.json())
app.use(express.urlencoded({extended: true}))
- the above code allows us to post json data via express server

////////////////////////
//////// NOTES 5 ///////
\\\\\\\\\\\\\\\\\\\\\\\\
 - password -> CMkrckcG6w7rakcx
 - npm i mongoose -> use when you want to connect to mongodb
 - mongoose.set("strictQuery", false); ->This means your queries can include any fields, regardless of whether they're specified in the Mongoose schema.
 - npm i dotenv ->  this will help to read a .env file